// Better would be to just use PriorityQueue, this solution is just for understanding logic

class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums.length==1 && k==1){
            return nums[0];
        } else{
            int new_k = nums.length - k; 
            return quickSelect(nums, 0, nums.length-1, new_k);
        }
    }
    public int quickSelect(int[] nums, int l, int r, int new_k) {
        int pivot = nums[r]; int p = l;
        for(int i=l; i<r; i++){
            if(nums[i]<=pivot){
                int temp_1=nums[p];
                nums[p]=nums[i];
                nums[i]=temp_1; p++;
            }
        }
        int temp_2=nums[p];
        nums[p]=nums[r];
        nums[r]=temp_2;
        if(p>new_k){
            return quickSelect(nums, l, p-1, new_k);
        } else if(p<new_k){
            return quickSelect(nums, p+1, r, new_k);
        } else{
            return nums[p];
        }
    }
}