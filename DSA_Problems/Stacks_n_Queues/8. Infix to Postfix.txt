class Solution {
    static int Prec(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1; // for parenthesis or other characters
    }
    // Function to convert an infix expression to a postfix expression.
    public static String infixToPostfix(String exp) {
        Stack<Character> st = new Stack<>();
        StringBuilder res = new StringBuilder();

        for (int i = 0; i < exp.length(); i++) {
            char c = exp.charAt(i);

            if (Character.isLetterOrDigit(c)) {
                res.append(c);
            } else if (c == '(') {
                st.push(c);
            } else if (c == ')') {
                while (!st.isEmpty() && st.peek() != '(') {
                    res.append(st.pop());
                }
                if (!st.isEmpty() && st.peek() == '(') {
                    st.pop();
                }
            } else {
                while (!st.isEmpty() && Prec(c) <= Prec(st.peek())) {
                    res.append(st.pop());
                }
                st.push(c);
            }
        }
        while (!st.isEmpty()) {
            if (st.peek() == '(') {
                return "Invalid Expression"; // Check for unbalanced parentheses
            }
            res.append(st.pop());
        }
        return res.toString();
    }
}
